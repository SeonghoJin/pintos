컴파일은 크게 전처리기, 컴파일러, 어셈블러, 링커에 의한 4단계로 나눌 수 있다. 

1. 전처리 단계(cpp프로그램 사용)
# 문자로 시작되는 지시자들에 대한 처리를 한다.
#include "header.h"라는 코드가 있는 경우 시스템에서 header.h파일을 읽어와 해당 소스파일에 그대로 삽입
시킨다. 전처리가 완료된 소스파일은 파일이름 뒤에 .i가 붙어서 저장된다.

2. 컴파일 단계(cc1 프로그램 사용)
전처리 단계에서 생성된 hello.i 파일을 읽어와 어셈블리 언어로 변환하여 .s파일을 생성한다.
c가 아닌 다른 언어라도 컴파일단계에서 기계어로 변환된다.

3. 어셈블리 단계(as 프로그램 사용)
hello.s파일을 쪼개서 instruction단위로 만들고, 한데모아 재배치 가능한 목적프로그램의 단위로 묶어
.o파일을 만든다. 재배치 가능하다는 의미는 링커를 통해 다른 목적파일들과 결합이 가능하다는 것을 의미
한다. 이러한 특성으로 프로그램의 소스코드가 일부가 변경되었을 때 전체 소스에 대한
컴파일을 새로 수행하는 것이 아니라 생성된 목적파일로 교체한다. 이 단계부터는
사람이 읽을 수 없는 내용으로 파일이 만들어진다. (binary 파일)

4. 링킹 단계 (ld 프로그램 사용)
많은 프로그램들은 외부의 라이브러리를 참고한다. 대표적으로 prinf가 있다.
링킹단계에서 hello.o 파일과 prinf.o 파일을 결합하여 프로그램이 정상작동된다. 

gcc option
-o : 바이너리 형식의 출력 파일 이름을 지정한다.
-E : 전처리를 실행하고, 컴파일을 중단하게 한다. 
-c : 소스 파일을 컴파일만 하고 링크를 수행하지 않으며, 오브젝트 파일을 생성한다.
-g : 바이너리에 표준 디버깅 정보를 포함한다.
-ggdb : 바이너리 파일에 GNU디버거인 gdb만이 이해할 수 있는 많은 디버깅 정보를 포함시킨다.
-static : 정적 라이브러리에 링크한다
-MM : make 호환의 의존성 목록을 출력한다.
-V : 컴파일의 각 단계에서 사용되는 명령어를 보여준다.


gcc -E 소스파일이름

을 하게 되면, 전처리까지만 실행하고 결과를 출력하게 되는데, 매우 많은 코드가 소스파일 위에
붙는것을 확인할 수 있다.

gcc -c 소스파일이름
을 하게 되면, file.o라는 오브젝트 파일이 생성된다! 분리 컴파일 할때 많이 사용한다. 

gcc -I 표준 디렉토리가 아닌 위치에 있는 헤더 파일을 가질때 그 디렉토리 위치를 지정해준다.

라이브러리란?

시스템에서 제공하는 라이브러리는 /usr/lib에 있고, 
표준라이브러리는 libgcc.a는 표준 라이브러리이다. 
이 표준라이브러리는 목적파일로 이루어져 있다.
ar t libgcc.a를 하게되면 어떤 목적파일로 이루어져 있는지 알려준다.

gcc -L옵션을 하게 되면 
링크할 라이브러리를 추가할 수 있게 된다.

gcc -0 소스파일 이름



