page fault handler와 같은 CPU에러핸들러가 일어났을 때, 누락되거나 결함이
있기 때문에 실행할 수 없다. 
하지만 CPU는 계속해서 double fault핸들러를 실행할려고 한다. 만약
double fault hanlder그 자체가 누락되거나 오류이면 triple fault라고 부른다. 
tiple fault는 즉시 CPU를 리셋시킨다.

그러므로 만약 계속해서 재부팅하는 상황을 경험했다면, triple faults로
인한 결과일것이다.

triple fault일때, 디버깅을 위해서 printf를 사용하지 못한다. 왜냐하면
재부팅은 printf를 실행시키기 위한 필요한 것 전에 되기 때문이다. 

triple fault를 디버깅하기 위해서는 두 가지방법이 있다.
먼저 GDB 감시아래 bochs에 pintos를 실행시킨다. 그리고 
bochs는 pintos에 적합하게 빌드 될경우 gdb감시에 있는 triple fault는 
다음과 같은 메세지를 출력할 것이다 "Triple fault: stopping for gdb"
그 다음 어디서 triple fault가 일어났는지 핀토스가 멈췄는지 알 수 있을 것이다. 

두번째는 무한루프를 호출하는 것이다. 핀토스 코드 중 장소를 골라서 무한루프를 삽입한다.
for(;;) 그런다음 다시 컴파일하고 실행시킨다. 
그러면 두가지 가능성이 있다.
리부팅없이 pintos는 멈춘다. 이렇게 된다면, 무한루프가 된다는 뜻이다. 
따라서 삽입한 무한루프 다음에 리부트를 일으킨다는 것을 알 수 있다. 

반대로 계속 리부트할것이고, 이것은 리부트를 일으키는 코드가 무한루프 코드 전에 있다는 것을 알 수 있다.
무한루프를 이진 탐색을 한다면 모든 곳에서 어디가 틀렸는지 정확하게 알 수 있을 것이다.
 