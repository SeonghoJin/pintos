동기화 하는 방법 중 하나로 써, 원시적인 세마포어의 동기화 방법보다 
진보된 방법이다. 한번에 하나의 프로세스만 모니터에서 활동하도록 보장한다. 

어떤 공유 데이터에 대해 모니터를 지정해놓으면, 프로세스는 
그 데이터를 접근하기 위해서 모니터에 들어가야만 한다. 즉, 모니터 내부에 들어간 
프로세스에게만 공유 데이터를 접근할 수 있는 기능을 제공하는 것이다. 또한 프로세스가 모니터에 들어가고자 할때, 
다른 프로세스가 모니터 내부에 있다면 입장 큐에서 계속해서 기다려야한다. 

모니터의 구조 
- 공유자원 
- 공유자원 접근 함수
- 상호배타 큐
- 조건동기 큐 
예제 코드
public class Main {
    public static void main(String[] args) throws InterruptedException {
            BankAccount b = new BankAccount();
            Parent p = new Parent(b);
            Child c = new Child(b);
            p.start();
            c.start();
        p.join();
        c.join();
            System.out.println( "\nbalance = " + b.getBalance());
        }
    }

class BankAccount {
    int balance;
    synchronized void deposit(int amt) {
        int temp = balance + amt;
        System.out.print("+");
        balance = temp;
    }
    synchronized void withdraw(int amt) {
        int temp = balance - amt;
        System.out.print("-");
        balance = temp;
    }
    int getBalance() {
        return balance;
    }
}

class Parent extends Thread {
    BankAccount b;
    Parent(BankAccount b) {
        this.b = b;
    }
    public void run() {
        for (int i=0; i<100000; i++)
            b.deposit(1000);
    }
}

class Child extends Thread {
    BankAccount b;
    Child(BankAccount b) {
        this.b = b;
    }
    public void run() {
        for (int i=0; i<100000; i++)
            b.withdraw(1000);
    }
}

//// 입금 출금 반복 수행

class BankAccount {
	int balance;
	boolean p_turn = true;
	synchronized void deposit(int amt) {
		int temp = balance + amt;
		System.out.print("+");
		balance = temp;
		notify();
		p_turn = false;
		try {
			wait();
		} catch (InterruptedException e) {}
	}
	synchronized void withdraw(int amt) {
		while (p_turn)
			try {
				wait();
			} catch (InterruptedException e) {}
		int temp = balance - amt;
		System.out.print("-");
		balance = temp;
		notify();
		p_turn = true;
	}
	int getBalance() {
		return balance;
	}
}