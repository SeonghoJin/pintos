비순차적 명령어 처리
- 마이크로프로세서가 특정한 종류의 지연으로 인해 낭비될 수 있는 
명령 사이클을 이용하는 패러다임, 명령 실행 효율을 극한으로 높일 수 있습니다. 

프로그래머는 프로그램을 짤 때 자신이 만든 코드가 차례대로 실행될것이라고 
생각하지만 사실 그렇지 않습니다. 예전에 있던 순차 프로세서는 그랬지만, 현재 
많이 사용되는 비순차 프로세서는 순서대로 코드가 실행되지 않습니다. 
만약 순차프로그램에서 메모리 로드 명령어가 캐시 미스를 겪고 있다고 가정해봅시다.
그렇다면 캐시미스를 할 동안 명령 사이클이 낭비가 됩니다. 이러한 명령 사이클 동안
로드 명령어와 상관이 없는 것이라면 분명 그것을 실행해도 문제가 되지 않을 것입니다. 
이것이 바로 명령어 수준 병렬성이라 부릅니다. 비순차 프로세서는 하드웨어가 
직접 실시간으로 명령어 수준 병렬성(Instruction Level Parallelism, ILP)
를 찾아 명령어 처리율을 극적으로 높입니다. 

순차적 처리 프로세서 
1. 명령어를 읽어들인다. 
2. 입력 연산이 준비되어 있으면(메모리 -> 레지스터로 load)
명령어는 적절한 실행 장치에 할당할 수 있고, 하나 이상의 연산이 
현재의 클럭 사이클 동안에 사용할 수 없다면 이  연산들을 사용할 수 있을 때
까지 프로세서는 대기한다. 
3. 적절한 실행 장치가 명령어를 실행한다.
4. 실행 장치는 실행 결과들을 레지스터 파일에 기록

비 순차적 프로세서
1. 명령어를 읽어들인다. 
2. 명령어 대기열에 명령어를 배치한다, 리오더 버퍼에도 할당한다. 
3. 대기열에 있는 명령어들은 자신의 피연산자가 완료가 되는지 계속 
명령어 완료 결과를 엿듣는다. 
4. 피연산자가 모두 완료되면 이 명령어는 비로소 실행되고, 연산 장치에
필요한 장치를 요구한다. 
5. 필요한 장치를 받으면 대기열에서 빠지고 실행된다.(리오더버퍼에는 그대로 있음)
6. 실행을 마치면 이 결과를 대기열에서 기다리는 명령에들에게 뿌린다. 
7. 리오더 버퍼에 자신이 완료되었다고 표시하고, 만약 리오더 버퍼에 자신이 가장 오래된
명령어라면 비로소 자신의 연산결과를 반영한다. 
