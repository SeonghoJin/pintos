A.2 threads
A.2.1 struct thread
struct thread는 pintos에서 다루는 thread data 구조입니다. 이는 "threads/thread.h"
에 선언되어있습니다. 

struct thread
 - 쓰레드나 user process를 나타냅니다. thread에는 멤버를 추가하거나 삭제해야
 합니다. 모든 struct thread는 자체 메모리 페이지의 시작부분을 차지합니다. 
 페이지의 나머지부분은 쓰레드 스택으로 사용됩니다. 쓰레드 스택은 페이지의 끝으로
 아래로 내려갑니다. 
 
 여기에는 두가지 결과가 있습니다. 먼저, struct thread는 더 커져서는 안됩니다. 
 그렇게 된다면, 커널 스택이 필요한 공간이 없어집니다. struct thread의 기본은 
 아주 작은 사이즈 byte만 갖도록하는 것입니다. 아마도 1kB이하여야 할 것입니다. 
 두번째로, Kernel stacks는 너무 커지면 안됩니다. 만약 stackoverflow가 생긴다면 
 쓰레드 상태는 망가지게 됩니다. 그러므로 커널 함수는 큰 구조체나 non-static한 local
 변수를 선언하지 않는게 좋습니다. 대신에 malloc을 사용하거나 palloc_get_page를 사용하세요.

========

uint8_t * stack
모든 쓰레드는 상태를 추적하기 위해서 자체스택을 가지고 있습니다. 
쓰레드가 실행 중일 때, CPU의 스택 포인터 레지스터는 스택의 끝을
추적합니다. 그리고 그 멤버는 사용되지 않습니다. 그러나 CPU가 다른
쓰레드로 변경되었을 때, 이 멤버는 쓰레드의 스택 포인터에 저장됩니다.
반드시 저장될 다른 레지스터는 스택에 저장되었기에, 다른 멤버들은 
쓰레드의 레지스터에 저장할 필요가 없습니다. 
유저프로그램 또는 커널에서 인터럽트가 일어났을 때,
struct intr_frame은 stack에 넣어집니다. 사용자 프로그램에서 
인터럽트가 일어났을 때, struct intr_frame은 항상 페이지의 맨 위에
존재합니다. 더 많은 정보를 보고 싶다면 A.4섹션을 보세요.

priority
현재 배포된 pintos는 우선순위가 없지만, 나중에 project1에서 
우선순위 스케쥴링을 구현해야합니다. 

struct list_elem allelem
이 list element는 스레드를 모든 쓰레드의 리스트에 연결하는데  
사용됩니다. 쓰레드가 생성되거나 쓰레드가 종료될 때 사라지거나 할떄, 
쓰레드는 이 리스트로 들어갑니다. thread_foreach() 함수를 사용하면
모든 쓰레드를 탐색할 수 있습니다. 

struct list_elem elem
list element는 쓰레드를 ready_list 또는 sema_down()에서 
대기중인 스레드 목록과 같은 이중 연결 목록에 넣는데 사용됩니다.
세마포어에서 대기중인 스레드가 준비되지 않았기 때문에 이중 작업을
수행 할 수 있으며, 그 반대의 경우도 마찬가지 입니다. 

uint32_t * pagedir
프로젝트 2나 그 뒤에서 사용됩니다. 

unsigned magic
항상 threads에 정의 된 임의의 숫자인 THREAD_MAGIC으로 설정합니다.
그리고 이는 스택오버플로우를 감지되었을때 사용됩니다. 
thread_current()는 현재 실행중인 thread의 struct thread 멤버인 
magic이 THREAD_MAGIC으로 설정되어있는지 확인합니다. 
에러가 일어났을때, 스택오버플로우는 이 값을 변경하는 경향이 있습니다. 
struct thread에 멤버를 추가했을 때, 마지막에 마법을 남겨두는게 좋습니다. 

========

A.2.2

